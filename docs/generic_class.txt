#encoding: utf-8
class Site < ActiveRecord::Base
  #########################################################################
  #
  # class level directives
  #
  #########################################################################
  paginates_per 20
  IDENTITY_COLUMNS = [:project_id, :url, :user_id]

  #########################################################################
  #
  # attr_accessible / attr_accessor / attr_reader / attr_writer
  #
  #########################################################################
  attr_accessor :date_created

  #########################################################################
  #
  # validations
  #
  #########################################################################

  #validates_uniqueness_of
  #validates_presence_of

  #########################################################################
  #
  # belongs_to
  #
  #########################################################################

  #########################################################################
  #
  # has_many
  #
  #########################################################################


  #########################################################################
  #
  # call backs
  #
  #########################################################################


  #########################################################################
  #
  # scopes
  #
  #########################################################################


  #########################################################################
  #
  # CLASS METHODS
  #
  #########################################################################

  def self.exists?(struct)
    where_clauses = []
    IDENTITY_COLUMNS.each do |identity_column|
      where_clauses << {identity_column => struct.send(identity_column)}
    end
    #raise where_clauses.inspect
    obj = self.where(where_clauses.first).first
    if obj
      return true, obj
    end
    return false, nil
  end
  
  def self.find_or_create(struct)
    exists, bkm = self.exists?(struct)
    return bkm if bkm
    #debugger
    bkm = Bookmark.new
    bkm.date_created_at = Date.today
    bkm.project_id = struct.project.id
    bkm.user_id = struct.user.id
    bkm.url = struct.url

    bkm.save
    if bkm.persisted?
      return 200, bkm
    else
      raise 500, bkm#.errors.full_messages.inspect
    end
    
  end
  
  #
  # The .to_h experimental version
  #
  
  def self.exists?(struct)
    where_clauses = []
    IDENTITY_COLUMNS.each do |identity_column|
      where_clauses << {identity_column => struct.send(identity_column)}
    end
    #raise where_clauses.inspect
    obj = self.where(where_clauses.first).first
    if obj
      return true, obj
    end
    return false, nil
  end
  
  # NOTE would require attr_accessible to allow for things in the struct that are 
  # flags on the play
  def self.find_or_create(struct)
    exists, bib = self.exists?(struct)
    return 200, bib if bib
    #debugger
    # params = Bibliography.struct_to_params(struct)
    # puts params.inspect
    bib = Bibliography.new(struct.to_h)
    #bib.date_created_at = Date.today
    # bib.title = struct.title
    # bib.user_id = struct.user.id
    # bib.url = struct.url
    # bib.active = struct.active

    bib.save
    if bib.persisted?
      return 200, bib
    else
      raise 500, bib#.errors.full_messages.inspect
    end
    
  end


  #########################################################################
  #
  # INSTANCE METHODS
  #
  #########################################################################


  #########################################################################
  #
  # PRIVATE METHODS
  #
  #########################################################################

  private

  #########################################################################
  #
  # PROTECTED METHODS
  #
  #########################################################################

  protected

end